DM1 : Approche objet, uttilisation et conception de classes simple.

Exercice 1 : Chronomètre :

  1) Voici les signatures de toute les fonction :
        public int getheure()
        public int getminute()
        public int getsecondes()
        public void setheure(int)
        public void setminute(int)
        public void setsecondes(int)



  2) Voici le constructeur de la classe Chrono1

        public Chrono1(){
            heure = 0;
            minute = 0;
            seconde = 0;
        }

    Voici le constructeur de la class Chrono2

        public Chrono2(){
            nbsecondes = 0;
        }

  3) Le probleme avec cette methode est le moment ou le chronometre est à 0,
     il ne faut pas qu'il passe à -1, et il faut pouvoir savoir que le compteur est fini.
     Pour resoudre ce probleme, on fait en sorte que la méthode renvoie 0 si le compteur à effectué le -1
     et -1 si le compteur a fini.

     Voici la méthode :
          public int rebours(){
            int sec = getseconde();
            int min = getminute();
            int h = getheure();

            if(sec+min+h > 0){
                setseconde(sec - 1);
                if(getseconde()<0){
                  setminute(min -1);
                  setseconde(59);
                }
                if(getminute()<0){
                  setheure(h -1);
                  setminute(59);
                }
                return 0;
            }
            else{return -1;}
          }



    4) La premiere implémentation est plus simple au niveau de l'implémentation des getteur et des setteur
       mais la fonction rebours est beaucoup plus compliquée. Avec la deuxieme implémentation, la fonction rebours est beaucoup plus
	   simple et comme c'est la fonction qui est repetée le plus de fois, c'est donc la meilleur implementation.
	   De plus la seconde implementation est moins gourmande en mémoire en effet le chronomètre ne prends qu'un int, (il en prend 3 dans la première).


    5) Le programme complet est disponible dans l'archive, EX1/EX1.java


  Exercice 2

    1) Les types de base de java ne sont pas capables de comprendre les nombres irrationnel,
       il n'est donc pas possible d'obtenir les valeurs exactes des operations arithmetiques.

    2) Voici le diagrame de la class Fraction

              ---------------
              |   Fraction  |
              ---------------
              | denominateur|
              | numerateur  |
              ---------------
              | getden      |
              | getnum      |
              | setden      |
              | add         |
              | sub         |
              | mult        |
              | reduc       |
              | addFraction |
              | MultFraction|
              ---------------

        Les signatures sont les suivantes :

                public int getden()
                public int getnum()
                public void setden(int d)
                public void setnum(int n)
                private void reduc()
                public void add(int x)
                public void sub(int x)
                public void mult(int x)
                public void addFraction(Fraction f2)
                public void multFraction(Fraction f2)


      3) Voici le code du constructeur de la class Fraction :

                public Fraction(int d,int n){
                  denominateur = d;
                  numerateur = n;
                  reduc();
                }

      4) Le programe complet est disponible dans l'archive, EX2/EX2.java



      BONUS : voici le code de la fonction pgcd()

                private int pgcd(int x,int y){
                if(x == 0){return y;}
                else if(y == 0){return y;}
                else if(y<=x){return pgcd(x-y,y);}
                else{return(pgcd(x,y-x));}
                }
